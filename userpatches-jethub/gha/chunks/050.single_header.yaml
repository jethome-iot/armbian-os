name: "[[script_name]]"

on:
  schedule:
    - cron: [[cron_job]]
  workflow_dispatch:
    inputs:
      skipImages:
        description: 'Skip building images? no = build images, yes = skip images'
        required: true
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'
      checkOci:
        description: 'Check OCI for existing artifacts? yes = check OCI, no = always build everything'
        required: true
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'
      extraParamsAllBuilds:
        description: 'Extra params for all builds/jobs (prepare/artifact/image) (eg: DEBUG=yes)'
        required: false
        default: ''
        type: string
      nightlybuild:
        description: 'yes = nighlty, no = stable'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'yes'
      uploadtoserver:
        description: 'CDN upload  github = releases, jethome = fw.jethome.ru'
        required: false
        options: [ 'github', 'jethome', 'both' ]
        type: choice
        default: 'github'
      versionOverride:
        description: 'Version override. Leave empty for automatic bump'
        required: false
        default: ''
      build_ref:
        description: 'Build repo ref (branch, tag, sha1)'
        required: false
        default: 'main-jethub'
      skip_version_bump:
        description: 'Skip version bump? true = skip, false = bump'
        required: false
        options: [ 'true', 'false' ]
        type: choice
        default: 'false'

env:

  # For easier reuse across the multiple chunks ('armbian/build' repo)
  BUILD_REPOSITORY: "[[org_and_build_repo]]"
  BUILD_REF: "${{ github.event.inputs.build_ref || '[[build_ref]]' }}" # branch or tag or sha1

  # For easier reuse across the multiple chunks ('armbian/os' repo)
  USERPATCHES_REPOSITORY: "[[org_and_userpatches_repo]]"
  USERPATCHES_REF: "[[userpatches_ref]]" # branch or tag or sha1
  USERPATCHES_DIR: "[[userpatches_dir]]" # folder inside USERPATCHES_REPOSITORY

  # Armbian envs. Adjust to your needs.
  # This makes builds faster, but only if the Docker images are up-to-date with all dependencies, Python, tools, etc. Otherwise it makes it... slower.
  DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust that Docker images are up-to-date.

  # Added to every build, even the prepare job.
  EXTRA_PARAMS_ALL_BUILDS: "${{ github.event.inputs.extraParamsAllBuilds }}"

  VERSION_OVERRIDE: "${{ github.event.inputs.versionOverride }}"

  # To use GitHub CLI in a GitHub Actions workflow
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Added to every image build arguments.
  EXTRA_PARAMS_IMAGE: "COMPRESS_OUTPUTIMAGE=xz,sha SHOW_DEBIAN=yes SHARE_LOG=yes "

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  version_prep:
    name: "Bump version"
    runs-on: [ "ubuntu-latest" ]
    steps:

      # Cleaning self hosted runners
      #- name: Runner clean
      #  uses: armbian/actions/runner-clean@main

      # Clone the userpatches repo (`armbian/os`)
      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v3
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: 0
          clean: false # true is default.

      - name: Determine version
        id: versionfile
        run: |

          if [ "${{ github.event.inputs.nightlybuild }}" == "no" ]; then
              echo "pre_release=false" >> $GITHUB_OUTPUT
              echo "file=stable" >> $GITHUB_OUTPUT
              echo "repoupload=armbian-test" >> $GITHUB_OUTPUT
          else
            echo "file=nightly" >> $GITHUB_OUTPUT
            echo "pre_release=true" >> $GITHUB_OUTPUT
            echo "repoupload=armbian-beta" >> $GITHUB_OUTPUT
          fi

      - name: Read Version
        #if: ${{ github.event.inputs.skipImages != 'yes' }}
        run: |
          SUBVER=$(cat '${{ steps.versionfile.outputs.file }}-jethome.json' | jq '.version')
          VER=$(cat "${{ steps.versionfile.outputs.file }}.json" | jq '.version')
          echo ${VER}.jh.${SUBVER}| sed "s/\"//g" | sed 's/^/VERSION_OVERRIDE=/' >> $GITHUB_ENV

      - name: Bump jethome subversion
        id: bumpjhver
        uses: jethome-iot/actions/armbian-jethome-version@master
        with:
          file: ${{ steps.versionfile.outputs.file }}-jethome.json

      - name: Get version tag
        id: changelog
        run: |
          
          echo "tag=$(cat ${{ steps.versionfile.outputs.file }}.json | jq -r .version).jh.${{ steps.bumpjhver.outputs.tag }}" >> $GITHUB_OUTPUT

      - name: Read Version
        if: ${{ steps.changelog.outputs.tag }}
        run: |
          echo "VERSION_OVERRIDE=${{ steps.changelog.outputs.tag }}" >> $GITHUB_ENV

      - name: "Generate body file"
        run: |
            echo "
              <h1 align=center>JetHome Rolling releases</h1>
              <p align=center>
              <img alt='Armbian Linux stable' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20current&query=CURRENT&color=f71000&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'>
              <img alt='Armbian Linux rolling' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20edge&query=EDGE&color=34be5b&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'>
              </p>
              <br>
              <br>
              &nbsp;
              </p>" > body.html

      - uses: ncipollo/release-action@v1
        if: ${{ (github.event.inputs.skipImages || 'yes') != 'yes' }}
        with:
          tag: "${{ env.VERSION_OVERRIDE }}"
          name: "${{ env.VERSION_OVERRIDE }}"
          bodyFile: "body.html"
          prerelease: "true"
          allowUpdates: true
          removeArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Save
        id: releases
        run: |
          echo "Version=${{ env.VERSION_OVERRIDE }}"
          echo "version=${{ env.VERSION_OVERRIDE }}" >> $GITHUB_OUTPUT

    outputs:

      # not related to matrix
      version: ${{ steps.releases.outputs.version }}
      repoupload: ${{ steps.versionfile.outputs.repoupload }}

  matrix_prep:
    name: "JSON matrix: [[num_chunks_artifacts]]/[[num_chunks_images]] :: [[num_chunks_artifacts]] artifact chunks, [[num_chunks_images]] image chunks"
    if: ${{ github.repository_owner == '[[org]]' }}
    needs: [ version_prep ]
    runs-on: [ "self-hosted", "Linux" ]
    steps:

      # Cleaning self hosted runners
      #- name: Runner clean
      #  uses: armbian/actions/runner-clean@main

      # clone the build system repo (`armbian/build`)
      - name: Checkout build repo
        uses: actions/checkout@v3
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ env.BUILD_REF }}
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.
          path: build

      # clone the userpatches repo (`armbian/os`)
      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v3
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: 0
          clean: false # true is default.
          path: userpatches

      - name: "grab the sha1 of the latest commit of the build repo ${{ env.BUILD_REPOSITORY }}#${{ env.BUILD_REF }}"
        id: latest-commit
        run: |
          cd build
          echo "sha1=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          cd ..

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |

          mkdir -pv build/userpatches
          rsync -av userpatches/${{env.USERPATCHES_DIR}}/. build/userpatches/

      - name: GitHub cache
        id: cache-restore
        uses: actions/cache@v3
        with:
          path: |
            cache/memoize
            cache/oci/positive
          key: ${{ runner.os }}-matrix-cache-${{ github.sha }}-${{ steps.latest-commit.outputs.sha1 }}"
          restore-keys: |
            ${{ runner.os }}-matrix-cache-

      # Login to ghcr.io, we're gonna do a lot of OCI lookups.
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: "[[ghcr_user]]" # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Prepare Info JSON and Matrices
        id: prepare-matrix
        run: |
          # this sets outputs "artifact-matrix" #and "image-matrix"
          cd build
          bash ./compile.sh gha-matrix [[userpatches_config_for_prepare_job]]  BETA=${{ github.event.inputs.nightlybuild || 'yes' }} CLEAN_INFO=yes CLEAN_MATRIX=yes MATRIX_ARTIFACT_CHUNKS=[[num_chunks_artifacts]] MATRIX_IMAGE_CHUNKS=[[num_chunks_images]] CHECK_OCI=${{ github.event.inputs.checkOci  || 'yes' }} TARGETS_FILENAME=targets.yaml SKIP_IMAGES=${{ github.event.inputs.skipImages || 'yes' }} ${{env.EXTRA_PARAMS_ALL_BUILDS}} SHARE_LOG=yes #  IMAGES_ONLY_OUTDATED_ARTIFACTS=yes

      - name: "Logs: ${{ steps.prepare-matrix.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.prepare-matrix.outputs.logs_url }}"

      # Store output/info folder in a GitHub Actions artifact
      - uses: actions/upload-artifact@v3
        name: Upload output/info as GitHub Artifact
        with:
          name: build-info-json
          path: build/output/info

      - name: chown cache memoize/oci back to normal user
        run: sudo chown -R $USER:$USER build/cache/memoize build/cache/oci/positive

    outputs:

      # not related to matrix
      build-sha1: ${{ steps.latest-commit.outputs.sha1 }}
      version: ${{ needs.version_prep.outputs.version }}
